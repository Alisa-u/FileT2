#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <assert.h>
#include <pthread.h>
#include "sem.h"
#include "list.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <sys/sendfile.h>
using namespace std;
#define NFDS 3

void* work_thread(void *arg)
{
	Node *head=(Node *)arg;
	while(1)
	{
		sem_p();//在线程中sem_p()操作
		int fd=Getc_list(head);//获取该链接描述附
		if(fd==-1)
		{
			continue;
		}
		printf("pthread beging...\n");
		while(1)
		{
			char *myargv[10]={0};//定义一个数组将它们都初始化为0
			char charbuff[128]={0};
			if(recv(fd,charbuff,128,0)==0)//接收来自客户端的终端输入（加#）   ls#    get#sem.c#	put#a.c#
			{
				break;
			}
			printf("%s\n",charbuff);
			char *ptr,*pstr;
			ptr=strtok_r(charbuff,"#",&pstr);
			//char *strtok_r(char *str, const char *delim, char **saveptr);
			if(ptr==NULL)
			{
				continue;
			}
			//printf("%s\n",ptr);
			
			myargv[0]=ptr;//将命令放到myargv[0]中 ls    get    put

			int i=1;

			while((ptr=strtok_r(NULL,"#",&pstr))!=NULL)
			{
				myargv[i++]=ptr;//将一个个的命令以及参数都放在myargv数组中
			}
			printf("myargv[0]=%s\n",myargv[0]);//myargv[0]=get

			printf("myargv[1]=%s\n",myargv[1]);//myargv[1]=sem.c
			
		
//如果所要执行的命令是get（下载）:	它对应的是客户端的void getfile(Node *head,int sockfd)		
			if(strncmp(myargv[0],"get",3)==0)//myargv[0]=get  myargv[1]=sem.c 
			{
			
				printf("get something\n");
				int fp=open(myargv[1],O_RDONLY);//以只读的方式打开list.c
				struct stat stat;//stat是一个结构体
				fstat(fp,&stat);
				int length=(int)stat.st_size;//获取文件的大小，这个中的stat.st_size是偏移量，把它转成int

				printf("%d\n",length);
				
				send(fd,&length,sizeof(int),0);//将这个文件（sem.c）的大小发给client
				//ssize_t send(int sockfd, const void *buf, size_t len, int flags);
				
				while(sendfile(fd,fp,NULL,521)>0)//sendfile函数在两个文件描述附直接传递数据（完全在内核中操作），从而避免了内核缓冲区和用户缓冲区之间的数据拷贝，从fp拷贝到fd上，只要fp上有数据，就会一直拷贝。
				//ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);
				{;}
				
			}
//如果所要执行的命令是put（上传）:	它对应的是客户端的void putfile(Node*head,int sockfd)
			else if(strncmp(myargv[0],"put",3)==0)//put a.c
			{
				printf("put something begin...\n");
				int pipefd[2];
				pipe(pipefd);//创建管道
				while(1)
				{
					char recvbuff[256]={0};
					int length=0;
					int l=recv(fd,&length,4,0);//接收来自服务器中收到的文件大小
					printf("%d\n",length);//调试信息
					int n=splice(sockfd,NULL,pipefd[1],NULL,length,0);
					if(n==0)
					{
						continue;
					}
					splice(pipefd[0],NULL,fd,NULL,n,0);//将这些从管道的读端读到fd文件中
					break;	
				}
			}
			else//myargv[0]是ls：
			{
				int pipefd[2];
				pipe(pipefd);//创建管道

				pid_t pid=fork();
			
				if(pid==0)
				{
					dup2(pipefd[1],1);//将标准输出重定向到管道的写端
					dup2(pipefd[1],2);//将标准错误输出重定向到管道的写端
					execvp(myargv[0],myargv);//跳转到myargv[0]即ls操作
					perror("execvp error");
					exit(0);
				}
				else
				{
					close(pipefd[1]);//关闭管道的写端

					char readbuff[521]={0};		
					if(read(pipefd[0],readbuff+2,521)==0)//将管道的读端读到readbuff+2中，
					{
						strncpy(readbuff,"1#",2);//若是没有读到信息，就是类似mkdir的操作，给前面拷贝1#
					}
					else
					{
						strncpy(readbuff,"0#",2);//若读到信息，就是类似ls的操作，给前面拷贝0#
					}
					
					send(fd,readbuff,strlen(readbuff),0);//将这些信息都返回给客户端0#list.c sem.c...
				
				}
			}
		}
	}
}
void create_thread(Node *head)//创建线程池
{
	pthread_t id[NFDS];
	int i=0;	
	for(;i<NFDS;++i)
	{
		pthread_create(&id[i],NULL,work_thread,(void *)head);//创建了三个线程
		//pthread_create(&id,NULL,fun,(void*)c);//只要产生新的描述附就去创建新的线程create
	}

}
int main()
{
	int sockfd=socket(AF_INET,SOCK_STREAM,0);
	assert(sockfd!=-1);

	struct sockaddr_in saddr,caddr;
	memset(&saddr,0,sizeof(saddr));
	saddr.sin_family=AF_INET;
	saddr.sin_port=htons(6500);
	saddr.sin_addr.s_addr=inet_addr("127.0.0.1");

	int res=bind(sockfd,(struct sockaddr*)&saddr,sizeof(saddr));
	assert(res!=-1);

	listen(sockfd,5);

	Node *head=NULL;
	Init_list(&head);//定义一个链表

	sem_init();//初始化信号量
	create_thread(head);//创建线程池
	while(1)
	{
		socklen_t len=sizeof(caddr);
		int c=accept(sockfd,(struct sockaddr*)&caddr,&len);//获取链接服务器的那个客户端的描述附
		if(c<0)
		{
			perror("client close");
			continue;
		}
		printf("begin\n");
		Add_list(head,c);//将此描述附添加到链表里
		sem_v();//v操作
	}
}










